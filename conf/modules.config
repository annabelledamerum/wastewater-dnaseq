/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: FASTQC {
        ext.args = '--quiet'
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}_raw" : "${meta.id}_raw" }
        publishDir = [
            path: { "${params.outdir}/fastqc/raw" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}'
        ]
    }

    withName: FASTQC_PROCESSED {
        ext.args = '--quiet'
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}_processed" : "${meta.id}_processed" }
        publishDir = [
            path: { "${params.outdir}/fastqc/processed" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}'
        ]
    }

    withName: FALCO {
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}_raw" : "${meta.id}_raw" }
        publishDir = [
            path: { "${params.outdir}/falco/raw" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,txt,zip}'
        ]
    }

    withName: FALCO_PROCESSED {
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}_processed" : "${meta.id}_processed" }
        publishDir = [
            path: { "${params.outdir}/falco/processed" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,txt,zip}'
        ]
    }

    withName: FASTP_SINGLE {
        ext.args   = [
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--disable_adapter_trimming" : "",
            params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter1 ? "--adapter_sequence ${params.shortread_qc_adapter1}" : "",
            // filtering options
            params.shortread_complexityfilter_tool == 'fastp' ? "--low_complexity_filter --complexity_threshold ${params.shortread_complexityfilter_fastp_threshold}" : ''
        ].join(' ').trim()
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}" : "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.{log,html,json}'
            ]
        ]
    }

    withName: FASTP_PAIRED {
        ext.args   = [
            // collapsing options - option to retain singletons
            params.shortread_qc_includeunmerged ? '--include_unmerged' : '',
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--disable_adapter_trimming" : "",
            params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter1 ? "--adapter_sequence ${params.shortread_qc_adapter1}" : "",
            params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter2 ? "--adapter_sequence_r2 ${params.shortread_qc_adapter2}" : "--detect_adapter_for_pe",
            // filtering options
            params.shortread_complexityfilter_tool == 'fastp' ? "--low_complexity_filter --complexity_threshold ${params.shortread_complexityfilter_fastp_threshold}" : ''
        ].join(' ').trim()
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}" : "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.{log,html,json}'
            ]
        ]
    }

    withName: ADAPTERREMOVAL_SINGLE {
        ext.args   = [
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--adapter1 ''" : params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter1 ? "--adapter1 ${params.shortread_qc_adapter1}" : ""
        ].join(' ').trim()
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}" : "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.settings'
            ]
        ]
    }

    withName: ADAPTERREMOVAL_PAIRED {
        ext.args   = [
            // collapsing options
            params.shortread_qc_mergepairs ? "--collapse" : "",
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--adapter1 ''" : params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter1 ? "--adapter1 ${params.shortread_qc_adapter1}" : "", // adding adapter list happens at module input channel level
            params.shortread_qc_skipadaptertrim ? "--adapter2 ''" : params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter2 ? "--adapter2 ${params.shortread_qc_adapter2}" : ""
        ].join(' ').trim()
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}" : "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.settings'
            ]
        ]
    }

    withName: PORECHOP_PORECHOP {
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}" : "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/porechop" },
                mode: params.publish_dir_mode,
                pattern: '*_porechopped.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/porechop" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }

    withName: FILTLONG {
        ext.args = [
            "--min_length ${params.longread_qc_qualityfilter_minlength}",
            "--keep_percent ${params.longread_qc_qualityfilter_keeppercent}",
            "--target_bases ${params.longread_qc_qualityfilter_targetbases}"
        ]
        .join(' ').trim()
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}_filtered" : "${meta.id}_filtered" }
        publishDir = [
            [
                path: { "${params.outdir}/filtlong" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/filtlong" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }

    withName: BOWTIE2_BUILD_HOST {
        publishDir = [
            path: { "${params.outdir}/bowtie2/host_alignment/build" },
            mode: params.publish_dir_mode,
            pattern: 'bowtie2',
            enabled: params.save_hostremoval_index
        ]
    }

    // Saving unmapped reads as FQ comes via input channel!
    withName: BOWTIE2_ALIGN_HOST {
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}" : "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/bowtie2/host_alignment/align" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/bowtie2/host_alignment/align" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: params.save_hostremoval_bam
            ],
            [
                path: { "${params.outdir}/bowtie2/host_alignment/align" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_hostremoval_unmapped
            ]
        ]
    }

    withName: BOWTIE2_BUILD_MAGS {
        publishDir = [
            path: { "${params.outdir}/bowtie2/mags/build" },
            mode: params.publish_dir_mode,
            pattern: 'bowtie2',
            enabled: params.save_hostremoval_index
        ]
    }

    // Saving unmapped reads as FQ comes via input channel!
    withName: BOWTIE2_ALIGN_MAGS {
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}" : "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/bowtie2/mags/align" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/bowtie2/mags/align" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: params.save_hostremoval_bam
            ],
            [
                path: { "${params.outdir}/bowtie2/mags/align" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_hostremoval_unmapped
            ]
        ]
    }

    withName: BWA_ALIGN_AMRDB {
        publishDir = [
            path: { "${params.outdir}/bwa/amr/" },
            mode: params.publish_dir_mode,
            pattern: pattern: '*.{bam,txt}'
        ]
    }
    
    withName: BWA_ALIGN_PATHDB {
        publishDir = [
            path: { "${params.outdir}/bwa/pathogens/" },
            mode: params.publish_dir_mode,
            pattern: pattern: '*.{bam,txt}'
        ]
    }


    withName: MINIMAP2_INDEX {
        ext.args = '-x map-ont'
        publishDir = [
            path: { "${params.outdir}/minimap2/index" },
            mode: params.publish_dir_mode,
            pattern: '*.mmi',
            enabled: params.save_hostremoval_index
        ]
    }

    withName: MINIMAP2_ALIGN {
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}" : "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/minimap2/align" },
            mode: params.publish_dir_mode,
            pattern: '*.bam',
            enabled: params.save_hostremoval_bam
        ]
    }

    withName: SAMTOOLS_VIEW {
        ext.args = '-f 4'
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}.unmapped" : "${meta.id}.unmapped" }
    }

    withName: SAMTOOLS_BAM2FQ {
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}.unmapped" : "${meta.id}.unmapped" }
        publishDir = [
            path: { "${params.outdir}/samtools/bam2fq" },
            mode: params.publish_dir_mode,
            pattern: '*.fq.gz',
            enabled: params.save_hostremoval_unmapped
        ]
    }

    withName: SAMTOOLS_STATS {
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}" : "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/samtools/stats" },
            mode: params.publish_dir_mode,
            pattern: '*stats'
        ]
    }

    withName: SAMTOOLS_COLLECT_STATS {
        publishDir = [
            path: { "${params.outdir}/pathogens/" },
            mode: params.publish_dir_mode,
            pattern: '*.{stats,txt}'
        ]
    }


    withName: BBMAP_BBDUK {
        ext.args =  [
                "entropy=${params.shortread_complexityfilter_entropy}",
                "entropywindow=${params.shortread_complexityfilter_bbduk_windowsize}",
                params.shortread_complexityfilter_bbduk_mask ?  "entropymask=t" : "entropymask=f"
            ].join(' ').trim()
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}" : "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/bbduk/" },
                mode: params.publish_dir_mode,
                pattern: '*.{fastq.gz,log}',
                enabled: params.save_complexityfiltered_reads
            ],
            [
                path: { "${params.outdir}/bbduk/" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }

    withName: PRINSEQPLUSPLUS {
        ext.args =  [
                params.shortread_complexityfilter_prinseqplusplus_mode == 'dust' ? "-lc_dust=${params.shortread_complexityfilter_prinseqplusplus_dustscore}" : "-lc_entropy=${params.shortread_complexityfilter_entropy}",
                "-trim_qual_left=0 -trim_qual_left=0 -trim_qual_window=0 -trim_qual_step=0",
            ].join(' ').trim()
        ext.prefix = { meta.run_accession ? "${meta.id}_${meta.run_accession}" : "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/prinseqplusplus/" },
                mode: params.publish_dir_mode,
                pattern: '*{_good_out.fastq.gz,_good_out_R1.fastq.gz,_good_out_R2.fastq.gz}',
                enabled: params.save_complexityfiltered_reads
            ],
            [
                path: { "${params.outdir}/prinseqplusplus/" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }

    withName: CAT_FASTQ {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/run_merging/" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.save_runmerged_reads
        ]
    }

    withName: MALT_RUN {
        ext.args = { "${meta.db_params} -m ${params.malt_mode}" }
        // one run with multiple samples, so fix ID to just db name to ensure clean log name
        ext.prefix = { "${meta.db_name}" }
        publishDir = [
            path: { "${params.outdir}/malt/${meta.db_name}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{rma6,log,sam}'
        ]
    }

    withName: 'MEGAN_RMA2INFO_TSV' {
        ext.args = "-c2c Taxonomy"
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/malt/${meta.db_name}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt.gz,megan}'
        ]
    }

    withName: KRAKEN2_KRAKEN2 {
        ext.args = params.kraken2_save_minimizers ? { "${meta.db_params} --report-minimizer-data" } : { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { meta.tool == "bracken" ? "${meta.id}_${meta.db_name}.bracken" : "${meta.id}_${meta.db_name}.kraken2" } : { meta.tool == "bracken" ? "${meta.id}_${meta.run_accession}_${meta.db_name}.bracken" : "${meta.id}_${meta.run_accession}_${meta.db_name}.kraken2" }
        publishDir = [
            path: { "${params.outdir}/kraken2/${meta.db_name}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt,fastq.gz}'
        ]
    }

    withName: BRACKEN_BRACKEN {
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}_${meta.db_name}.bracken" } : { meta.run_accession ? "${meta.id}_${meta.run_accession}_${meta.db_name}.bracken" : "${meta.id}_${meta.db_name}.bracken" }
        publishDir = [
            path: { "${params.outdir}/bracken/${meta.db_name}/" },
            mode: params.publish_dir_mode,
            pattern: '*.tsv'
        ]
    }

    withName: BRACKEN_COMBINEBRACKENOUTPUTS {
        ext.prefix = { "bracken_${meta.id}_combined_reports" }
        publishDir = [
            path: { "${params.outdir}/bracken/" },
            mode: params.publish_dir_mode,
            pattern: '*.txt'
        ]
    }

    withName: KRAKENTOOLS_COMBINEKREPORTS_KRAKEN {
        ext.prefix = { "kraken2_${meta.id}_combined_reports" }
        publishDir = [
            path: { "${params.outdir}/kraken2/" },
            mode: params.publish_dir_mode,
            pattern: '*.txt'
        ]
    }

    withName: KRAKENUNIQ_PRELOADEDKRAKENUNIQ {
        ext.args = { "${meta.db_params}" }
        // one run with multiple samples, so fix ID to just db name to ensure clean log name
        ext.prefix = { "${meta.db_name}.krakenuniq" }
        publishDir = [
            path: { "${params.outdir}/krakenuniq/${meta.db_name}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt,fastq.gz}'
        ]
    }

    withName: KRONA_CLEANUP {
        ext.prefix = params.perform_runmerging ? { "${meta.id}_${meta.db_name}" } : { meta.run_accession ? "${meta.id}_${meta.run_accession}_${meta.db_name}" : "${meta.id}_${meta.db_name}" }
        publishDir = [
            path: { "${params.outdir}/krona/" },
            mode: params.publish_dir_mode,
            pattern: '*.{html}'
        ]
    }

    withName: KRONA_KTIMPORTTEXT {
        ext.prefix = { "${meta.tool}_${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/krona/" },
            mode: params.publish_dir_mode,
            pattern: '*.{html}'
        ]
    }

    withName: 'MEGAN_RMA2INFO_KRONA' {
        ext.args = { "--read2class Taxonomy" }
        ext.prefix = { "${meta.id}_${meta.db_name}" }
    }

    withName: KRONA_KTIMPORTTAXONOMY {
        ext.args = "-i"
        ext.prefix = { "${meta.tool}_${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/krona/" },
            mode: params.publish_dir_mode,
            pattern: '*.{html}'
        ]
    }

    withName: METAPHLAN4_METAPHLAN4 {
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}_${meta.db_name}.metaphlan4" } : { meta.run_accession ? "${meta.id}_${meta.run_accession}_${meta.db_name}.metaphlan4" : "${meta.id}_${meta.db_name}.metaphlan4" }
        publishDir = [
            path: { "${params.outdir}/metaphlan4/${meta.db_name}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{biom,txt}'
        ]
    }

    withName: METAPHLAN4_MERGEMETAPHLANTABLES {
        ext.prefix = { "metaphlan4_${meta.id}_combined_reports" }
        publishDir = [
            path: { "${params.outdir}/metaphlan4/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt}'
        ]
    }

    withName: KHMER_TRIM_LOW_ABUND {
        publishDir = [
            path: { "${params.outdir}/khmer_trim_low_abund/" },
            mode: params.publish_dir_mode,
            pattern: '*.log'
        ]
    }

    withName: RESISTOME_RESULTS {
        publishDir = [
            path: { "${params.outdir}/resistome_results/" },
            mode: params.publish_dir_mode,
            pattern: '*.csv'
        ]
    }
   
    withName: RESISTOME_SNPRESULTS {
        publishDir = [
            path: { "${params.outdir}/resistome_results/" },
            mode: params.publish_dir_mode,
            pattern: '*.csv'
        ]
    } 

    withName: SOURMASH_SKETCH {
        publishDir = [
            path: { "${params.outdir}/sourmash_sketch/" },
            mode: params.publish_dir_mode,
            pattern: '*.{sig,log}'
       ]
    }

    withName: SOURMASH_GATHER {
        publishDir = [
            path: { "${params.outdir}/sourmash_gather/" },
            mode: params.publish_dir_mode,
            pattern: '*.{with-lineages.csv,log}'
       ]
    }

    withName: QIIME_DATAMERGE {
        publishDir = [
            path: { "${params.outdir}/qiime_mergeddata/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
       ]
    }

    withName: QIIME_FILTER_SINGLETON_SAMPLE {
        publishDir = [
            path: { "${params.outdir}/qiime_mergeddata/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
       ]
    }

    withName: QIIME_ALPHARAREFACTION {
        publishDir = [
            path: {"${params.outdir}/qiime_alpha_rarefaction/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME_BARPLOT {
        publishDir = [
            path: {"${params.outdir}/qiime_composition_barplot/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GROUP_COMPOSITION {
        publishDir = [
            path: {"${params.outdir}/groups_of_interest/" },
            mode: params.publish_dir_mode,
            pattern: '*.xlsx'
        ]
    }

    withName: 'QIIME_DIVERSITYCORE|QIIME_ALPHADIVERSITY|QIIME_BETAGROUPCOMPARE' {
        publishDir = [
            path: { "${params.outdir}/qiime_diversity/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'REFMERGE_ALPHARAREFACTION' {
        publishDir = [
            path: { "${params.outdir}/refmerged/alpha-rarefaction/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
   
    withName: 'REFMERGE_DIVERSITYCORE|REFMERGE_ALPHADIVERSITY|REFMERGE_BETAGROUPCOMPARE' {
        publishDir = [
            path: { "${params.outdir}/refmerged/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CENTRIFUGE_CENTRIFUGE {
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}_${meta.db_name}.centrifuge" } : { meta.run_accession ? "${meta.id}_${meta.run_accession}_${meta.db_name}.centrifuge" : "${meta.id}_${meta.db_name}.centrifuge" }
        publishDir = [
            path: { "${params.outdir}/centrifuge/${meta.db_name}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt,sam,gz}'
        ]
    }

    withName: CENTRIFUGE_KREPORT {
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}_${meta.db_name}.centrifuge" } : { meta.run_accession ? "${meta.id}_${meta.run_accession}_${meta.db_name}.centrifuge" : "${meta.id}_${meta.db_name}.centrifuge"}
        publishDir = [
            path: { "${params.outdir}/centrifuge/${meta.db_name}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt}'
        ]
    }

    withName: KRAKENTOOLS_COMBINEKREPORTS_CENTRIFUGE {
        ext.prefix = { "centrifuge_${meta.id}_combined_reports" }
        publishDir = [
            path: { "${params.outdir}/centrifuge/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt}'
        ]
    }

    withName: KAIJU_KAIJU {
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}_${meta.db_name}.kaiju" } : { meta.run_accession ? "${meta.id}_${meta.run_accession}_${meta.db_name}.kaiju" : "${meta.id}_${meta.db_name}.kaiju" }
        publishDir = [
            path: { "${params.outdir}/kaiju/${meta.db_name}/" },
            mode: params.publish_dir_mode,
            pattern: '*.tsv'
        ]
    }

    withName: 'KAIJU_KAIJU2TABLE_SINGLE' {
        ext.prefix = params.perform_runmerging ? { "${meta.id}_${meta.db_name}.kaijutable" } : { meta.run_accession ? "${meta.id}_${meta.run_accession}_${meta.db_name}.kaijutable" : "${meta.id}_${meta.db_name}.kaijutable"}
        publishDir = [
            path: { "${params.outdir}/kaiju/${meta.db_name}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt}'
        ]
    }

    withName: 'KAIJU_KAIJU2TABLE_COMBINED' {
        ext.prefix = { "kaiju_${meta.id}_combined_reports" }
        publishDir = [
            path: { "${params.outdir}/kaiju/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt}'
        ]
    }

    withName: KAIJU_KAIJU2KRONA {
        ext.args = '-v -u'
    }

    withName: DIAMOND_BLASTX {
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}_${meta.db_name}.diamond" } : { meta.run_accession ? "${meta.id}_${meta.run_accession}_${meta.db_name}.diamond" : "${meta.id}_${meta.db_name}.diamond" }
        publishDir = [
            path: { "${params.outdir}/diamond/${meta.db_name}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{blast,xml,txt,daa,sam,tsv,paf,log}'
        ]
    }

    withName: MOTUS_PROFILE {
        ext.args = {
            [
                params.motus_remove_ncbi_ids ? "" : "-p",
                params.motus_use_relative_abundance ? "" : "-c",
                params.motus_save_mgc_read_counts ?  "-M ${task.ext.prefix}.mgc" : ""
            ].join(',').replaceAll(','," ")
            }
        ext.prefix = params.perform_runmerging ? { "${meta.id}_${meta.db_name}" } : { meta.run_accession ? "${meta.id}_${meta.run_accession}_${meta.db_name}" : "${meta.id}_${meta.db_name}" }
        publishDir = [
            path: { "${params.outdir}/motus/${meta.db_name}/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: MOTUS_MERGE {
        ext.args = { params.standardisation_motus_generatebiom ? "-B" : "" }
        ext.prefix = { "motus_${meta.id}_combined_reports" }
        publishDir = [
            path: { "${params.outdir}/motus/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: TAXPASTA_MERGE {
        ext.args =  {
            [
                "-p ${meta.tool} -o ${meta.tool}_${meta.id}.${params.standardisation_taxpasta_format}",
                params.taxpasta_taxonomy_dir ? "--taxonomy ${params.taxpasta_taxonomy_dir}" : "",
                params.taxpasta_add_name ?  "--add-name" : "",
                params.taxpasta_add_rank ? "--add-rank" : "",
                params.taxpasta_add_lineage ? "--add-lineage" : "",
                params.taxpasta_add_idlineage ? "--add-id-lineage" : ""
            ].join(' ').trim()
            }
        publishDir = [
            path: { "${params.outdir}/taxpasta/" },
            mode: params.publish_dir_mode,
            pattern: '*.{tsv,csv,arrow,parquet,biom}'
        ]
    }

    withName: PATHOGEN_COVERAGE {
        publishDir = [
            path: { "${params.outdir}/pathogens/" },
            mode: params.publish_dir_mode,
            pattern: '*.csv'
        ]
    }

    withName: PATHOGEN_ID {
        publishDir = [
            path: { "${params.outdir}/pathogens/" },
            mode: params.publish_dir_mode,
            pattern: '*.{csv, png}'
        ]
    }

    withName: RGI_BWT {
        ext.args = { 
            [
                params.rgi_bwt_mode == 'kwa' ? "-a kwa" : "",
                params.include_other_models ? "--include_other_models" : "",
                params.include_wildcard ? "--include_wildcard" : ""
            ].join(' ').trim()
            }
        publishDir = [
            path: { "${params.outdir}/rgi/rgi_bwt" },
            mode: params.publish_dir_mode,
            pattern: '*.{}'
        ]
    }

    withName: SPADES {
        ext.args = { params.spades_mode == '--meta' ? "--meta" : "" }
        publishDir = [
            path: { "${params.outdir}/spades/" },
            mode: params.publish_dir_mode,
            pattern: '*.{fasta,gfa,log}'
        ]
    }

    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/quast/" },
            mode: params.publish_dir_mode,
            pattern: '*.{tsv}'
        ]
    }

    withName: METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS {
        publishDir = [
            path: { "${params.outdir}/metabat2/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt}'
        ]
    }
    
    withName: METABAT2_METABAT2 {
        publishDir = [
            path: { "${params.outdir}/metabat2/" },
            mode: params.publish_dir_mode,
            pattern: '*.{fa,tooShort,lowDepth,unbinned,tsv}'
        ]
    }

    withName: MAXBIN2 {
        publishDir = [
            path: { "${params.outdir}/maxbin2/" },
            mode: params.publish_dir_mode,
            pattern: '*.{fasta,summary,log,marker,noclass,tooshort,tar}'
        ]
    }

    withName: DASTOOL_FASTATOCONTIG2BIN {
        publishDir = [
            path: { "${params.outdir}/das_tool/" },
            mode: params.publish_dir_mode,
            pattern: '*.{tsv}'
        ]
    }

    withName: DASTOOL_DASTOOL {
        ext.args = { params.write_bins ? "--write_bins" : "" }
        publishDir = [
            path: { "${params.outdir}/das_tool/" },
            mode: params.publish_dir_mode,
            pattern: '*.{log,faa,tsv,scg,b6,seqlength}'
        ]
    }


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MULTIQC {
        ext.args   = [
            "--cl-config \"top_taxa: $params.top_taxa\"",
            params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SUMMARIZE_DOWNLOADS {
        publishDir = [
            path: { "${params.outdir}/download_data" },
            mode: params.publish_dir_mode
        ]
    }
}
